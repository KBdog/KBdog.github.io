<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录从一月份以来的漫画爬虫学习</title>
    <url>/2021/03/15/crawler/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>从上一年年末开始，我一直使用各种爬虫工具看漫画，这些爬虫工具引起了我浓厚的学习兴趣。于是脑海中产生了自己写爬虫工具的想法。后来我通过对tachiyomi，cimoc等开源项目以及各种博客的学习中了解到了基本的爬虫原理，然后着手实践起来。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><ol>
<li>本人博文内容皆仅限用于学习和研究，部分敏感内容来源于互联网</li>
<li>如果侵犯了您的版权请通过<a href="mailto:1246450339@qq.com">我的邮箱</a>或<a href="https://space.bilibili.com/3368545">B站账号</a>与我获得联系，我会尽快删除相关内容</li>
</ol>
<h2 id="简单的漫画爬虫过程"><a href="#简单的漫画爬虫过程" class="headerlink" title="简单的漫画爬虫过程"></a>简单的漫画爬虫过程</h2><ol>
<li>使用抓包工具如<a href="https://www.charlesproxy.com/">Charles</a>等截获浏览器或app的http和https请求</li>
<li>获取并分析截获的api接口，从中提取关键信息（漫画的搜索关键字、章节、每张图片等在URL中的位置）</li>
<li>从漫画关键字搜索api中获取精准漫画信息</li>
<li>从漫画信息中提取漫画id或漫画路径</li>
<li>使用漫画id等关键信息访问章节api获取当前漫画所有章节</li>
<li>从单个章节中获取其所有图片列表</li>
<li>使用IO流下载图片</li>
</ol>
<h2 id="爬虫实践过程"><a href="#爬虫实践过程" class="headerlink" title="爬虫实践过程"></a>爬虫实践过程</h2><ol>
<li>第一个爬虫项目：<a href="https://github.com/KBdog/crawler-comic-dmzj">https://github.com/KBdog/crawler-comic-dmzj</a> ，完成时间：2021-01-26<br>这是我第一个爬虫项目，是通过分析dmzj网页版的标签来获取图片url下载，并不完全按以上顺序来进行。这个项目使用了selenium对网页进行模拟人工操作，通过ChromeDriver访问单点漫画首页获取所有章节标签链接，然后根据每个章节开多线程访问获得各章图片列表url。分析标签和下载使用了webmagic，在pipeline中使用io流对分析后的图片集合进行下载。（这次的项目还特意用javafx写了图形化界面，后面发现过于花里胡哨并不实用，因此在后续的爬虫项目中取消了写图形化界面的想法，直接改用命令行运行）</li>
<li>第二个爬虫项目：<a href="https://github.com/KBdog/crawler-comic-dmzj2">https://github.com/KBdog/crawler-comic-dmzj2</a>，完成时间：2021-02-01<br>分析dmzj的api接口一步步进行数据搜集<br>该项目参考了<a href="https://github.com/savvym/pydmzj.git">@SavvyM</a>大佬对dmzj的抓包接口，这也是我第一次了解到api接口。大佬给出的接口信息：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">动漫之家搜索api:</span><br><span class="line">http:&#x2F;&#x2F;sacg.dmzj.com&#x2F;comicsum&#x2F;search.php?s&#x3D;$&#123;comic&#x2F;author&#125;</span><br><span class="line">小说详情api:  </span><br><span class="line">http:&#x2F;&#x2F;v2.api.dmzj.com&#x2F;novel&#x2F;$&#123;id&#125;.json (旧)  </span><br><span class="line">http:&#x2F;&#x2F;v3api.dmzj.com&#x2F;novel&#x2F;$&#123;id&#125;.json (新)  </span><br><span class="line">漫画详情api:  </span><br><span class="line">http:&#x2F;&#x2F;v2.api.dmzj.com&#x2F;comic&#x2F;$&#123;id&#125;.json (旧)  </span><br><span class="line">http:&#x2F;&#x2F;v3api.dmzj.com&#x2F;comic&#x2F;comic_$&#123;id&#125;.json(新)  </span><br><span class="line">漫画下载api:  </span><br><span class="line">https:&#x2F;&#x2F;imgzip.dmzj.com&#x2F;$&#123;first_character&#x2F;number&#125;&#x2F;$&#123;comic_id&#125;&#125;&#x2F;$&#123;chapter_id&#125;.zip  </span><br><span class="line">其中  </span><br><span class="line">$&#123;first_character&#x2F;number&#125;：漫画名称首字母或者数字  </span><br><span class="line">$&#123;comic_id&#125;:漫画id  </span><br><span class="line">$&#123;chapter_id&#125;:章节id  </span><br><span class="line">漫画章节信息api:  </span><br><span class="line">http:&#x2F;&#x2F;v3api.dmzj.com&#x2F;chapter&#x2F;$&#123;comic_id&#125;&#x2F;$&#123;chapter_id&#125;.json  </span><br><span class="line">漫画章节吐槽api:</span><br><span class="line">http:&#x2F;&#x2F;v3api.dmzj.com&#x2F;viewPoint&#x2F;0&#x2F;$&#123;comic_id&#125;&#x2F;$&#123;chapter_id&#125;.json </span><br></pre></td></tr></table></figure>
简单漫画的三要素为漫画简介、漫画章节、漫画图片，通过访问接口的信息分析得到，通常漫画的属性是按关键字、单漫画的id、单章节的id这个顺序来进行的。因此在代码中，我们可以通过解析接口返回的json数据来获得以上属性再逐步往下解析json最终使用io流下载图片。</li>
<li>第三个爬虫项目：<a href="https://github.com/KBdog/crawler-comic-copymanga">https://github.com/KBdog/crawler-comic-copymanga</a>，完成时间：2021-02-10<br>使用httpcanary抓包copymanga的api并下载其资源<br>由于各种各样的原因，dmzj的部分漫画隐藏了起来，通过抓包抓到的api仅仅能访问可供普通用户浏览的漫画，许多隐藏漫画都无法浏览下载，为了能浏览更多的漫画本人必须扩展漫画源。最后我选择了copymanga，其接口数据简单清晰。此次的项目中，我遇到了防盗链与代理的问题。通常网站都会做防盗链的处理，简单理解就是服务端会对你的请求头进行验证，其中referer的头信息如果没有包含要求的服务端要求的信息，则服务端会判断你访问该链接的方式并不是从他们网站跳转过去的，然后禁止访问。解决方案：在访问头信息中添加相应referer<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">connection.setRequestProperty(<span class="string">&quot;Referer&quot;</span>,<span class="string">&quot;http://xxx.com/&quot;</span>);</span><br></pre></td></tr></table></figure>
然后就是代理问题，由于源站是域外的网站，访问不稳定且使用io流下载时使用的是tcp连接，影响更大，因此必须设置代理访问。这里使用快代理等免费代理即可解决。代理商提供的通常为Socket，在代码中建立连接时，使用代理连接服务商的socket进行代理访问即可。</li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
        <tag>漫画</tag>
      </tags>
  </entry>
  <entry>
    <title>欢迎来到我的博客</title>
    <url>/2021/01/17/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="欢迎你陌生人"><a href="#欢迎你陌生人" class="headerlink" title="欢迎你陌生人"></a>欢迎你陌生人</h1><ul>
<li><a href="http://localhost:4000/">KBdog的个人博客</a></li>
<li><a href="https://github.com/KBdog">Github</a></li>
<li><a href="https://space.bilibili.com/3368545">Bilibili</a></li>
<li><a href="https://twitter.com/yu1246450339">Twitter</a></li>
</ul>
]]></content>
      <categories>
        <category>hello world</category>
      </categories>
      <tags>
        <tag>hello world</tag>
      </tags>
  </entry>
  <entry>
    <title>SSM框架学习（一）mybatis</title>
    <url>/2021/03/18/mybatis-1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这个学期学校开始教javaee框架，虽说我之前已经稍微学习了解过ssm，但学习的过程以及内容挺碎片化的。现在再按学校教程顺序重新过一遍理论。从这篇博文开始记录一下学习ssm的整个过程。</p>
<h2 id="mybatis简介"><a href="#mybatis简介" class="headerlink" title="mybatis简介"></a>mybatis简介</h2><p>之前没有使用mybatis时通常都是使用jdbc的方法（主要的操作对象：Connection、Preparestatement、ResultSet）来操作数据库，每次执行sql操作都要频繁建立数据库连接，从而造成资源的浪费。mybatis是一种ORM框架，ORM框架可以完成对象模型和关系模型的映射。采用ORM框架后，应用程序不用再直接访问数据库，而是以面向对象的方法来操作持久化对象（PO），其通过面向对象的方法来代替程序操作底层SQL。简单理解就是mybatis不用执行jdbc方法中过多繁琐的操作，可以简化数据库操作。</p>
<h2 id="mybatis的配置"><a href="#mybatis的配置" class="headerlink" title="mybatis的配置"></a>mybatis的配置</h2><ol>
<li>如果在springboot项目中，只需在springboot整体的配置文件application.yml中配置即可<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">账号</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">密码</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?useSSL=false&amp;serverTimezone=GMT</span> <span class="comment">#（如对应数据库有设置编码则需要说明characterEncoding）</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:映射文件目录mapping所在（如：classpath:mapping/*Mapper.xml）</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">数据库映射实体对象别名包（如：per.study.entity）</span></span><br></pre></td></tr></table></figure></li>
<li>如果在其他项目中，则要额外编写配置文件（.xml），下面是一个简单的mybatis配置文件范例<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!--environments中default元素指向默认数据源（此处数据源为id为mybatis的数据源）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mybatis&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--给数据源定id值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mybatis&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--此处使用jdbc事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置数据库连接池参数--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--此处有三个参数可供选择，POOLED、UNPOOLED、JNDI--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--UNPOOLED每次被请求时都会打开和关闭，适用于没有性能要求的应用--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--POOLED避免了创建新连接实例所必须的初始化和认证时间，使用于Web应用的快速响应方式--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--JNDI这种数据源的实现是为了能和EJB或应用服务器这类容器中使用，容器可以集中或在外部配置数据源--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--驱动名（我使用的是mysql，对应以下驱动名）--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql对应的url（如对应数据库有设置编码则需要说明characterEncoding）--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/test-mybatis?useSSL=false<span class="symbol">&amp;amp;</span>serverTimezone=GMT<span class="symbol">&amp;amp;</span>characterEncoding=utf8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--数据库账号密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper映射文件位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;mapper.BookMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="mapper的使用"><a href="#mapper的使用" class="headerlink" title="mapper的使用"></a>mapper的使用</h2></li>
</ol>
<p>由于已经配置好配置文件，则我们可以开始关注具体业务的实现，不用再关心数据库连接的问题。</p>
<ol>
<li><p>mapper即是映射文件，通常命名为 实体名+Mapper.xml。mapper文件是sql语句的具体实现，增删改查的sql语句都会写在mapper里（非注解方式）。而对应的在程序里的接口类可以在mapper文件里指明来使用。</p>
</li>
<li><p>现在举个映射文件方式使用mapper的例子。（数据库all_comic表与Comic实体对应）</p>
</li>
</ol>
<p>首先建个实体类Comic</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用lombok可以自动生成set和get方法</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer comicId;</span><br><span class="line">    <span class="keyword">private</span> String comicName;</span><br><span class="line">    <span class="keyword">private</span> String comicDescription;</span><br><span class="line">    <span class="keyword">private</span> String comicCover;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其对应的接口dao层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComicMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有漫画</span></span><br><span class="line">    <span class="function">List&lt;Comic&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口所对应的mapper，mapper标签的namespace要指定接口文件的位置，resultMap是定义返回的结果集，增删改查的语句就不用多说了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.kbcomic.mapper.ComicMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;comic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.kbcomic.entity.Comic&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column是数据库字段,property是实体属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicDescription&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_cover&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicCover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有漫画，id名要对应上接口方法名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;comic&quot;</span>&gt;</span></span><br><span class="line">        select * from all_comic</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>根据上面mapper文件和mapper接口的映射，我们直接通过对象调用接口即可实现数据库操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//先使用输入流读取配置文件</span></span><br><span class="line">InputStream inputStream= Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>);</span><br><span class="line"><span class="comment">//使用mybatis四大组件中的构造器创建工厂</span></span><br><span class="line">SqlSessionFactoryBuilder builder=<span class="keyword">new</span> SqlSessionFactoryBuilder();</span><br><span class="line"><span class="comment">//从输入流中获得配置文件</span></span><br><span class="line">SqlSessionFactory factory = builder.build(inputStream);</span><br><span class="line"><span class="comment">//从工厂中获得sqlsession</span></span><br><span class="line">SqlSession sqlSession = factory.openSession();</span><br><span class="line"><span class="comment">//获得session后可以对接mapper开始执行sql</span></span><br><span class="line">ComicMapper mapper = sqlSession.getMapper(ComicMapper.class);</span><br><span class="line"><span class="comment">//执行查询语句</span></span><br><span class="line">List&lt;Comic&gt; comics = mapper.queryAll();</span><br><span class="line"><span class="comment">//遍历集合打印</span></span><br><span class="line"><span class="keyword">for</span>(Comic comic:comics)&#123;</span><br><span class="line">    System.out.println(comic);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>注解方式实现mapper<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComicMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有漫画</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from all_comic&quot;)</span></span><br><span class="line">    <span class="comment">//此处使用效果跟mapper文件中ResultMap一样，column指定数据库字段名，property指明对象实体属性</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;comic&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,column = &quot;comic_id&quot;,property = &quot;comicId&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_name&quot;,property = &quot;comicName&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_description&quot;,property = &quot;comicDescription&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_cover&quot;,property = &quot;comicCover&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;update_time&quot;, property=&quot;updateTime&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="function">List&lt;Comic&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
由此可见使用注解方式不用再编写mapper.xml文件，更进一步简化整个流程。这也是通常大众所使用的方式。<h2 id="mybatis中的缓存机制"><a href="#mybatis中的缓存机制" class="headerlink" title="mybatis中的缓存机制"></a>mybatis中的缓存机制</h2>mybatis缓存分为一级缓存和二级缓存，同时也可以配置关于缓存的设置。一级缓存是位于SqlSession上的缓存，二级缓存是在SqlSessionFactory上的缓存。通常情况下，mybatis会开启一级缓存，也就是处于SqlSession上的缓存，这个缓存不需要POJO对象可序列化。</li>
<li>二级缓存的开启<br>在mybatis的配置文件中的settings标签中添加二级缓存的开启<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
（非注解方式）在mapper中添加二级缓存声明<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.kbcomic.mapper.ComicMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加二级缓存声明--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>&gt;</span><span class="tag">&lt;/<span class="name">cache</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;comic&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.example.kbcomic.entity.Comic&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--column是数据库字段,property是实体属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_description&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicDescription&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;comic_cover&quot;</span> <span class="attr">property</span>=<span class="string">&quot;comicCover&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--查询所有漫画，id名要对应上接口方法名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;comic&quot;</span>&gt;</span></span><br><span class="line">        select * from all_comic</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>
（注解方式）添加二级缓存，在mapper接口上添加@CacheNamespace(blocking = true)或对应方法添加option注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheNamespace(blocking = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ComicMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询所有漫画</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from all_comic&quot;)</span></span><br><span class="line">    <span class="comment">//此处使用效果跟mapper文件中ResultMap一样，column指定数据库字段名，property指明对象实体属性</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;comic&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,column = &quot;comic_id&quot;,property = &quot;comicId&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_name&quot;,property = &quot;comicName&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_description&quot;,property = &quot;comicDescription&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;comic_cover&quot;,property = &quot;comicCover&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;create_time&quot;,property = &quot;createTime&quot;),</span></span><br><span class="line"><span class="meta">            @Result(column = &quot;update_time&quot;, property=&quot;updateTime&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="comment">//useCache=true启用二级缓存</span></span><br><span class="line">    <span class="meta">@Options(useCache = true)</span></span><br><span class="line">    <span class="function">List&lt;Comic&gt; <span class="title">queryAll</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>缓存方式的利弊<br>利：开启缓存后，第一次查询会执行sql，第二次及以后的查询都会从缓存中读取数据。减少了访问数据库的次数，优化系统性能。<br>弊：开启缓存的弊端是数据没有实时性，当数据库中的数据一旦修改，查询的数据还是缓存中的数据没有实时性。</li>
<li>对于缓存方式的弊端，有如下解决方案<br>（非注解方式）<br>①禁止缓存：在mapper文件select语句中设置useCache=”false”<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;comic&quot;</span> <span class="attr">useCache</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">        select * from all_comic</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
②清空缓存：在insert或update语句中设置flushCache=”true”<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateComic&quot;</span> <span class="attr">flushCache</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">	update all_comic</span><br><span class="line">        set comic_description=#&#123;comic.comicDescription&#125;,comic_cover=#&#123;comic.comicCover&#125;,update_time=#&#123;comic.updateTime&#125;</span><br><span class="line">        where comic_id=#&#123;comicId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
（注解方式）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在更新或插入时候刷新缓存</span></span><br><span class="line"><span class="meta">@Options(flushCache = Options.FlushCachePolicy.TRUE)</span></span><br><span class="line"><span class="function">Integer <span class="title">updateComic</span><span class="params">(Comic comic)</span></span>;</span><br><span class="line"><span class="comment">//在查询时禁止缓存</span></span><br><span class="line"><span class="meta">@Options(useCache = false)</span></span><br><span class="line">List&lt;Book&gt;queryAll();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>mybatis</tag>
        <tag>项目配置</tag>
      </tags>
  </entry>
  <entry>
    <title>插入代码</title>
    <url>/2021/01/19/test_blog_2/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试插入代码"><a href="#测试插入代码" class="headerlink" title="测试插入代码"></a>测试插入代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> []args)</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>插入aplayer插件</title>
    <url>/2021/01/18/test_blog_1/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试插入aplayer插件"><a href="#测试插入aplayer插件" class="headerlink" title="测试插入aplayer插件"></a>测试插入aplayer插件</h2>
        <div id="aplayer-lXbBaFZz" class="aplayer aplayer-tag-marker" style="margin-bottom: 20px;"></div>
			  <script>
				  var options = {"narrow":false,"autoplay":false,"showlrc":3,"volum":0.2,"music":[{"title":"稻香","author":"周杰伦","url":"/musiclist/周杰伦 - 稻香.mp3","pic":"/images_chapters/beauty.jpg"},{"title":"给我一首歌的时间-周杰伦","author":"周杰伦","url":"/musiclist/给我一首歌的时间-周杰伦.mp3","pic":"/images_chapters/beauty.jpg"}]};
				  options.element = document.getElementById("aplayer-lXbBaFZz");
				  var ap = new APlayer(options);
			    window.aplayers || (window.aplayers = []);
				  window.aplayers.push(ap);
			  </script>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>插件</tag>
        <tag>aplayer</tag>
        <tag>音乐</tag>
      </tags>
  </entry>
  <entry>
    <title>插入图片</title>
    <url>/2021/01/19/test_blog_3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试图片插入"><a href="#测试图片插入" class="headerlink" title="测试图片插入"></a>测试图片插入</h2><p><img src="/images_chapters/beauty.jpg" alt="有描述性文字的图片"><br><img src="/images_chapters/comet.jpg"></p>
<div class="justified-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg"><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg"><br><img src="https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg"><br><img src="https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg"><br><img src="https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg"><br><img src="https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg"><br><img src="https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg"><br><img src="https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg"> </p>
          </div>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>图片</tag>
      </tags>
  </entry>
  <entry>
    <title>插入dplayer插件</title>
    <url>/2021/01/20/test_blog_4/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="测试添加视频"><a href="#测试添加视频" class="headerlink" title="测试添加视频"></a>测试添加视频</h2><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"theme":"#FF69B4","lang":"zh-cn","preload":"auto","volume":0.7,"video":{"url":"/medialist/小碧蓝幻想.mkv","pic":"/images_chapters/beauty.jpg"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
<h2 id="github例子"><a href="#github例子" class="headerlink" title="github例子"></a>github例子</h2><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"theme":"#FADFA3","loop":true,"video":{"url":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.mp4","pic":"https://moeplayer.b0.upaiyun.com/dplayer/hikarunara.jpg"},"danmaku":{"id":"9E2E3368B56CDBB4","api":"https://api.prprpr.me/dplayer/","token":"tokendemo","addition":["https://dplayer.daoapp.io/bilibili?aid=4157142"]}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>视频</tag>
        <tag>dplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>插入标签</title>
    <url>/2021/01/21/test_blog_5/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><div class="note simple"><p>默认提示块标签</p>
</div>

<div class="note default simple"><p>default提示块标签</p>
</div>

<div class="note primary simple"><p>primary提示块标签</p>
</div>

<div class="note success simple"><p>success提示块标签</p>
</div>

<div class="note info simple"><p>info提示块标签</p>
</div>

<div class="note warning simple"><p>warning提示块标签</p>
</div>

<div class="note danger simple"><p>danger提示块标签</p>
</div>

]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>标签</tag>
      </tags>
  </entry>
</search>
